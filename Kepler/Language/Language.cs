using System.Text.RegularExpressions;
using Andrei15193.Kepler.Language.Lexic;
using Andrei15193.Kepler.Language.Lexic.Scanner;
using Andrei15193.Kepler.Language.Syntax.Parser;
namespace Andrei15193.Kepler.Language
{
	public static class KeplerLanguage
	{
		public static IScanner GetScanner<TScanner>()
			where TScanner : IScanner, new()
		{
			return new TScanner()
			{
				AtomSepcifications =
				{
					AtomSpecification.Create(AtomCode.Assert,
											 "assert"),
					AtomSpecification.Create(AtomCode.Else,
											 "else"),
					AtomSpecification.Create(AtomCode.End,
											 "end"),
					AtomSpecification.Create(AtomCode.Fact,
											 "fact"),
					AtomSpecification.Create(AtomCode.False,
											 "false"),
					AtomSpecification.Create(AtomCode.New,
											 "new"),
					AtomSpecification.Create(AtomCode.Predicate,
											 "predicate"),
					AtomSpecification.Create(AtomCode.Skip,
											 "skip"),
					AtomSpecification.Create(AtomCode.Stop,
											 "stop"),
					AtomSpecification.Create(AtomCode.Then,
											 "then"),
					AtomSpecification.Create(AtomCode.True,
											 "true"),
					AtomSpecification.Create(AtomCode.When,
											 "when"),
					AtomSpecification.Create(AtomCode.Throw,
											 "throw"),
					AtomSpecification.Create(AtomCode.Try,
											 "try"),
					AtomSpecification.Create(AtomCode.Catch,
											 "catch"),
					AtomSpecification.Create(AtomCode.Finally,
											 "finally"),
					AtomSpecification.Create(AtomCode.And,
											 "and"),
					AtomSpecification.Create(AtomCode.Or,
											 "or"),

					AtomSpecification.Create(AtomCode.Scope,
											 "::",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Star,
											 "*",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Percentage,
											 "%",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Slash,
											 "/",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Plus,
											 "+",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Minus,
											 "-",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.LessThan,
											 "<",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.LessThanOrEqualTo,
											 "<=",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Equal,
											 "=",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Distinct,
											 "<>",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.GreaterThanOrEqualTo,
											 ">=",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.GreaterThan,
											 ">",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Not,
											 "!",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.OpeningRoundParenthesis,
											 "(",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.ClosingRoundParenthesis,
											 ")",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.OpeningSquareParenthesis,
											 "[",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.ClosingSquareParenthesis,
											 "]",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Dot,
											 ".",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Colon,
											 ":",
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Comma,
											 ",",
											 isSeparator: true),

					AtomSpecification.Create(AtomCode.WhiteSpace,
											 " ",
											 ignoreAtom: true,
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.Tabulator,
											 "\t",
											 ignoreAtom: true,
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.LineFeed,
											 "\n",
											 ignoreAtom: true,
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.CarriageReturn,
											 "\r",
											 ignoreAtom: true,
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.NewLine,
											 "\r\n",
											 ignoreAtom: true,
											 isSeparator: true),

					AtomSpecification.Create(AtomCode.Identifier,
											 new Regex(@"([_a-zA-Z][_a-zA-Z0-9]{0,249})", RegexOptions.Compiled)),
					AtomSpecification.Create(AtomCode.IntegerNumericConstant,
											 new Regex(@"(0|[1-9]\d*)", RegexOptions.Compiled)),
					AtomSpecification.Create(AtomCode.FloatNumericConstant,
											 new Regex(@"(0|[1-9]\d*\.\d*[1-9])", RegexOptions.Compiled)),
					AtomSpecification.Create(AtomCode.CharConstant,
											 new Regex(@"'([^']|\\')'", RegexOptions.Compiled)),
					AtomSpecification.Create(AtomCode.StringConstant,
											 "\"",  "\""),

					AtomSpecification.Create(AtomCode.Comment,
											 new Regex(@"#.*\r\n", RegexOptions.Compiled),
											 ignoreAtom: true,
											 isSeparator: true),
					AtomSpecification.Create(AtomCode.MultilineComment,
											 "#{", "}",
											 ignoreAtom: true,
											 isSeparator: true)
				}
			};
		}

		public static IParser GetParser<TParser>()
			where TParser : IParser, new()
		{
			return new TParser()
			{
				StartRule = ProductionRuleCode.ProgramFragment,
				ProductionRules =
				{
					new ProductionRule(ProductionRuleCode.Expression,
									   new ProductionRuleSymbol(ProductionRuleCode.Operand)),
					new ProductionRule(ProductionRuleCode.Expression,
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),
					new ProductionRule(ProductionRuleCode.Expression,
									   new ProductionRuleSymbol(ProductionRuleCode.UnaryPrefixedOperator),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression)),
					new ProductionRule(ProductionRuleCode.Expression,
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(ProductionRuleCode.BinaryOperator),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression)),
					new ProductionRule(ProductionRuleCode.Expression,
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.Scope),
									   new ProductionRuleSymbol(ProductionRuleCode.FunctionCall)),
									   
					new ProductionRule(ProductionRuleCode.UnaryPrefixedOperator,
									   new ProductionRuleSymbol(AtomCode.Not)),
					new ProductionRule(ProductionRuleCode.UnaryPrefixedOperator,
									   new ProductionRuleSymbol(AtomCode.Minus)),
									   
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.Plus)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.Minus)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.Star)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.Percentage)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.Slash)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.And)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.Or)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.LessThan)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.LessThanOrEqualTo)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.Equal)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.GreaterThanOrEqualTo)),
					new ProductionRule(ProductionRuleCode.BinaryOperator,
									   new ProductionRuleSymbol(AtomCode.GreaterThan)),

					new ProductionRule(ProductionRuleCode.Operand,
									   new ProductionRuleSymbol(ProductionRuleCode.FunctionCall)),
					new ProductionRule(ProductionRuleCode.Operand,
									   new ProductionRuleSymbol(AtomCode.CharConstant)),
					new ProductionRule(ProductionRuleCode.Operand,
									   new ProductionRuleSymbol(AtomCode.FloatNumericConstant)),
					new ProductionRule(ProductionRuleCode.Operand,
									   new ProductionRuleSymbol(AtomCode.IntegerNumericConstant)),
					new ProductionRule(ProductionRuleCode.Operand,
									   new ProductionRuleSymbol(AtomCode.StringConstant)),
					new ProductionRule(ProductionRuleCode.Operand,
									   new ProductionRuleSymbol(AtomCode.True)),
					new ProductionRule(ProductionRuleCode.Operand,
									   new ProductionRuleSymbol(AtomCode.False)),

					new ProductionRule(ProductionRuleCode.FunctionCall,
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),
					new ProductionRule(ProductionRuleCode.FunctionCall,
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),
					new ProductionRule(ProductionRuleCode.FunctionCall,
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.ActualParameters),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),

					new ProductionRule(ProductionRuleCode.FunctionCall,
									   new ProductionRuleSymbol(AtomCode.New),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),
					new ProductionRule(ProductionRuleCode.FunctionCall,
									   new ProductionRuleSymbol(AtomCode.New),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),
					new ProductionRule(ProductionRuleCode.FunctionCall,
									   new ProductionRuleSymbol(AtomCode.New),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.ActualParameters),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),

					new ProductionRule(ProductionRuleCode.ActualParameters,
									   new ProductionRuleSymbol(ProductionRuleCode.ActualParameters),
									   new ProductionRuleSymbol(AtomCode.Comma),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression)),
									   
					new ProductionRule(ProductionRuleCode.ProgramFragment,
									   new ProductionRuleSymbol(ProductionRuleCode.PredicateDefinition)),
					new ProductionRule(ProductionRuleCode.ProgramFragment,
									   new ProductionRuleSymbol(ProductionRuleCode.FactDefinition)),
									   
					new ProductionRule(ProductionRuleCode.PredicateDefinition,
									   new ProductionRuleSymbol(AtomCode.Predicate),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.End)),
					new ProductionRule(ProductionRuleCode.PredicateDefinition,
									   new ProductionRuleSymbol(AtomCode.Predicate),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.FormalParameters),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.End)),
									   
					new ProductionRule(ProductionRuleCode.FormalParameters,
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration)),
					new ProductionRule(ProductionRuleCode.FormalParameters,
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration)),
					new ProductionRule(ProductionRuleCode.FormalParameters,
									   new ProductionRuleSymbol(ProductionRuleCode.FormalParameters),
									   new ProductionRuleSymbol(AtomCode.Comma),
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration)),
									   
					new ProductionRule(ProductionRuleCode.FactDefinition,
									   new ProductionRuleSymbol(AtomCode.Fact),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis),
									   new ProductionRuleSymbol(AtomCode.End)),
					new ProductionRule(ProductionRuleCode.FactDefinition,
									   new ProductionRuleSymbol(AtomCode.Fact),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
									   new ProductionRuleSymbol(ProductionRuleCode.FactParameters),
									   new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis),
									   new ProductionRuleSymbol(AtomCode.End)),
									   
					new ProductionRule(ProductionRuleCode.FactParameters,
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration),
									   new ProductionRuleSymbol(ProductionRuleCode.BinaryOperator),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression)),
					new ProductionRule(ProductionRuleCode.FactParameters,
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration),
									   new ProductionRuleSymbol(ProductionRuleCode.BinaryOperator),
									   new ProductionRuleSymbol(ProductionRuleCode.FactParameters),
									   new ProductionRuleSymbol(AtomCode.Comma),
									   new ProductionRuleSymbol(ProductionRuleCode.FactParameters)),
			
					new ProductionRule(ProductionRuleCode.Statements,
									   new ProductionRuleSymbol(ProductionRuleCode.Statement)),
					new ProductionRule(ProductionRuleCode.Statements,
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(ProductionRuleCode.Statement)),

					new ProductionRule(ProductionRuleCode.Statement,
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.Dot)),
					new ProductionRule(ProductionRuleCode.Statement,
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclarationStatement)),
					new ProductionRule(ProductionRuleCode.Statement,
									   new ProductionRuleSymbol(ProductionRuleCode.WhenStatement)),
					new ProductionRule(ProductionRuleCode.Statement,
									   new ProductionRuleSymbol(ProductionRuleCode.TryCatchFinallyStatement)),

					new ProductionRule(ProductionRuleCode.VariableDeclarationStatement,
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration),
									   new ProductionRuleSymbol(AtomCode.Equal),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.Dot)),
									   
					new ProductionRule(ProductionRuleCode.WhenStatement,
									   new ProductionRuleSymbol(AtomCode.When),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.Then),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.End)),
					new ProductionRule(ProductionRuleCode.WhenStatement,
									   new ProductionRuleSymbol(AtomCode.When),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.Then),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.End)),
					new ProductionRule(ProductionRuleCode.WhenStatement,
									   new ProductionRuleSymbol(AtomCode.When),
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.Then),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.Else),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.End)),
					new ProductionRule(ProductionRuleCode.WhenStatement,
									   new ProductionRuleSymbol(AtomCode.When),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.Then),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.Else),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.End)),

					new ProductionRule(ProductionRuleCode.TryCatchFinallyStatement,
									   new ProductionRuleSymbol(AtomCode.Try),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(ProductionRuleCode.Catches),
									   new ProductionRuleSymbol(AtomCode.End)),
					new ProductionRule(ProductionRuleCode.TryCatchFinallyStatement,
									   new ProductionRuleSymbol(AtomCode.Try),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(ProductionRuleCode.Catches),
									   new ProductionRuleSymbol(AtomCode.Finally),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.End)),
					new ProductionRule(ProductionRuleCode.TryCatchFinallyStatement,
									   new ProductionRuleSymbol(AtomCode.Try),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.Finally),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements),
									   new ProductionRuleSymbol(AtomCode.End)),
									   
					new ProductionRule(ProductionRuleCode.Catches,
									   new ProductionRuleSymbol(AtomCode.Catch),
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements)),
					new ProductionRule(ProductionRuleCode.Catches,
									   new ProductionRuleSymbol(AtomCode.Catch),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements)),
					new ProductionRule(ProductionRuleCode.Catches,
									   new ProductionRuleSymbol(ProductionRuleCode.Catches),
									   new ProductionRuleSymbol(AtomCode.Catch),
									   new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements)),
					new ProductionRule(ProductionRuleCode.Catches,
									   new ProductionRuleSymbol(ProductionRuleCode.Catches),
									   new ProductionRuleSymbol(AtomCode.Catch),
									   new ProductionRuleSymbol(ProductionRuleCode.Statements)),

					new ProductionRule(ProductionRuleCode.VariableDeclaration,
									   new ProductionRuleSymbol(AtomCode.Identifier),
									   new ProductionRuleSymbol(AtomCode.Colon),
									   new ProductionRuleSymbol(ProductionRuleCode.Type)),
									   
					new ProductionRule(ProductionRuleCode.Type,
									   new ProductionRuleSymbol(AtomCode.Identifier)),

					new ProductionRule(ProductionRuleCode.Type,
									   new ProductionRuleSymbol(ProductionRuleCode.Type),
									   new ProductionRuleSymbol(AtomCode.Scope),
									   new ProductionRuleSymbol(AtomCode.Identifier)),
					new ProductionRule(ProductionRuleCode.Type,
									   new ProductionRuleSymbol(ProductionRuleCode.Type),
									   new ProductionRuleSymbol(AtomCode.LessThan),
									   new ProductionRuleSymbol(ProductionRuleCode.Type),
									   new ProductionRuleSymbol(AtomCode.GreaterThan)),
					new ProductionRule(ProductionRuleCode.Type,
									   new ProductionRuleSymbol(ProductionRuleCode.Type),
									   new ProductionRuleSymbol(AtomCode.LessThan),
									   new ProductionRuleSymbol(ProductionRuleCode.GenericTypes),
									   new ProductionRuleSymbol(AtomCode.GreaterThan)),
					new ProductionRule(ProductionRuleCode.GenericTypes,
									   new ProductionRuleSymbol(ProductionRuleCode.Type),
									   new ProductionRuleSymbol(AtomCode.Comma),
									   new ProductionRuleSymbol(ProductionRuleCode.GenericTypes)),
									   
					new ProductionRule(ProductionRuleCode.ExitStatement,
									   new ProductionRuleSymbol(AtomCode.Assert),
									   new ProductionRuleSymbol(ProductionRuleCode.Expression),
									   new ProductionRuleSymbol(AtomCode.Dot)),
					new ProductionRule(ProductionRuleCode.ExitStatement,
									   new ProductionRuleSymbol(AtomCode.Skip),
									   new ProductionRuleSymbol(AtomCode.Dot)),
					new ProductionRule(ProductionRuleCode.ExitStatement,
									   new ProductionRuleSymbol(AtomCode.Stop),
									   new ProductionRuleSymbol(AtomCode.Dot))
					}
			};
		}
	}
}