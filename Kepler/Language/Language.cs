using System.Text.RegularExpressions;
using Andrei15193.Kepler.Language.Lexic;
using Andrei15193.Kepler.Language.Lexic.Scanners;
using Andrei15193.Kepler.Language.Syntax;
using Andrei15193.Kepler.Language.Syntax.Parsers;
using ProductionRuleSymbol = Andrei15193.Kepler.Language.Syntax.ProductionRuleSymbol<Andrei15193.Kepler.Language.AtomCode, Andrei15193.Kepler.Language.ProductionRuleCode>;
namespace Andrei15193.Kepler.Language
{
	public static class KeplerLanguage
	{
		public static TScanner GetScanner<TScanner>()
			where TScanner : IScanner<AtomCode>, new()
		{
			return new TScanner()
			{
				AtomSepcifications =
				{
					AtomSpecification.CreateLiteral(AtomCode.Assert,
													"assert"),
					AtomSpecification.CreateLiteral(AtomCode.Else,
													"else"),
					AtomSpecification.CreateLiteral(AtomCode.End,
													"end"),
					AtomSpecification.CreateLiteral(AtomCode.Fact,
													"fact"),
					AtomSpecification.CreateLiteral(AtomCode.False,
													"false"),
					AtomSpecification.CreateLiteral(AtomCode.New,
													"new"),
					AtomSpecification.CreateLiteral(AtomCode.Predicate,
													"predicate"),
					AtomSpecification.CreateLiteral(AtomCode.Skip,
													"skip"),
					AtomSpecification.CreateLiteral(AtomCode.Stop,
													"stop"),
					AtomSpecification.CreateLiteral(AtomCode.Then,
													"then"),
					AtomSpecification.CreateLiteral(AtomCode.True,
													"true"),
					AtomSpecification.CreateLiteral(AtomCode.When,
													"when"),
					AtomSpecification.CreateLiteral(AtomCode.Throw,
													"throw"),
					AtomSpecification.CreateLiteral(AtomCode.Try,
													"try"),
					AtomSpecification.CreateLiteral(AtomCode.Catch,
													"catch"),
					AtomSpecification.CreateLiteral(AtomCode.Finally,
													"finally"),
					AtomSpecification.CreateLiteral(AtomCode.And,
													"and"),
					AtomSpecification.CreateLiteral(AtomCode.Or,
													"or"),

					AtomSpecification.CreateLiteral(AtomCode.Scope,
													"::",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Star,
													"*",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Percentage,
													"%",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Slash,
													"/",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Plus,
													"+",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Minus,
													"-",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.LessThan,
													"<",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.LessThanOrEqualTo,
													"<=",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Equal,
													"=",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Distinct,
													"<>",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.GreaterThanOrEqualTo,
													">=",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.GreaterThan,
													">",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Not,
													"!",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.OpeningRoundParenthesis,
													"(",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.ClosingRoundParenthesis,
													")",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.OpeningSquareParenthesis,
													"[",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.ClosingSquareParenthesis,
													"]",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Dot,
													".",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Colon,
													":",
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Comma,
													",",
													isSeparator: true),

					AtomSpecification.CreateLiteral(AtomCode.WhiteSpace,
													" ",
													ignoreAtom: true,
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.Tabulator,
													"\t",
													ignoreAtom: true,
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.LineFeed,
													"\n",
													ignoreAtom: true,
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.CarriageReturn,
													"\r",
													ignoreAtom: true,
													isSeparator: true),
					AtomSpecification.CreateLiteral(AtomCode.NewLine,
													"\r\n",
													ignoreAtom: true,
													isSeparator: true),

					AtomSpecification.CreatePattern(AtomCode.Identifier,
													new Regex(@"([_a-zA-Z][_a-zA-Z0-9]{0,249})", RegexOptions.Compiled)),
					AtomSpecification.CreatePattern(AtomCode.IntegerNumericConstant,
													new Regex(@"(0|[1-9]\d*)", RegexOptions.Compiled)),
					AtomSpecification.CreatePattern(AtomCode.FloatNumericConstant,
													new Regex(@"(0|[1-9]\d*\.\d*[1-9])", RegexOptions.Compiled)),
					AtomSpecification.CreatePattern(AtomCode.CharConstant,
													new Regex(@"'([^']|\\')'", RegexOptions.Compiled)),
					AtomSpecification.CreateEnclosed(AtomCode.StringConstant,
													 "\"",  "\""),

					AtomSpecification.CreatePattern(AtomCode.Comment,
													new Regex(@"#.*\r\n", RegexOptions.Compiled),
													ignoreAtom: true,
													isSeparator: true),
					AtomSpecification.CreateEnclosed(AtomCode.MultilineComment,
													 "#{", "}",
													 ignoreAtom: true,
													 isSeparator: true)
				}
			};
		}
		public static IParser<AtomCode, ProductionRuleCode> GetParser()
		{
			return new LLParser<AtomCode, ProductionRuleCode>(2)
			{
				StartRuleCode = ProductionRuleCode.Assembly,
				ProductionRules =
				{
					ProductionRule.Create(ProductionRuleCode.QualifiedIdentifier,
										  new ProductionRuleSymbol(AtomCode.Identifier),
										  new ProductionRuleSymbol(AtomCode.Scope),
										  new ProductionRuleSymbol(ProductionRuleCode.QualifiedIdentifier)),
					ProductionRule.Create(ProductionRuleCode.QualifiedIdentifier,
										  new ProductionRuleSymbol(AtomCode.Identifier)),

					//ProductionRule.Create(ProductionRuleCode.Expression,
					//					  new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
					//					  new ProductionRuleSymbol(ProductionRuleCode.Expression),
					//					  new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),
					ProductionRule.Create(ProductionRuleCode.Expression,
										  new ProductionRuleSymbol(ProductionRuleCode.Operand),
										  new ProductionRuleSymbol(ProductionRuleCode.OtherExpression)),
					ProductionRule.Create(ProductionRuleCode.OtherExpression,
										  new ProductionRuleSymbol(ProductionRuleCode.BinaryOperator),
										  new ProductionRuleSymbol(ProductionRuleCode.Expression)),
					ProductionRule.Create(ProductionRuleCode.OtherExpression,
										  new ProductionRuleSymbol[0]),

					ProductionRule.Create(ProductionRuleCode.Operand,
										  new ProductionRuleSymbol(ProductionRuleCode.FunctionCall)),
					ProductionRule.Create(ProductionRuleCode.Operand,
										  new ProductionRuleSymbol(AtomCode.CharConstant)),
					ProductionRule.Create(ProductionRuleCode.Operand,
										  new ProductionRuleSymbol(AtomCode.FloatNumericConstant)),
					ProductionRule.Create(ProductionRuleCode.Operand,
										  new ProductionRuleSymbol(AtomCode.IntegerNumericConstant)),
					ProductionRule.Create(ProductionRuleCode.Operand,
										  new ProductionRuleSymbol(AtomCode.StringConstant)),
					ProductionRule.Create(ProductionRuleCode.Operand,
										  new ProductionRuleSymbol(AtomCode.True)),
					ProductionRule.Create(ProductionRuleCode.Operand,
										  new ProductionRuleSymbol(AtomCode.False)),
					ProductionRule.Create(ProductionRuleCode.Operand,
										  new ProductionRuleSymbol(ProductionRuleCode.UnaryPrefixedOperator),
										  new ProductionRuleSymbol(ProductionRuleCode.Expression)),

					ProductionRule.Create(ProductionRuleCode.UnaryPrefixedOperator,
										  new ProductionRuleSymbol(AtomCode.Not)),
					ProductionRule.Create(ProductionRuleCode.UnaryPrefixedOperator,
										  new ProductionRuleSymbol(AtomCode.Minus)),

					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.Plus)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.Minus)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.Star)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.Percentage)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.Slash)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.And)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.Or)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.LessThan)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.LessThanOrEqualTo)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.Equal)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.GreaterThanOrEqualTo)),
					ProductionRule.Create(ProductionRuleCode.BinaryOperator,
										  new ProductionRuleSymbol(AtomCode.GreaterThan)),

					ProductionRule.Create(ProductionRuleCode.FunctionCall,
										  new ProductionRuleSymbol(ProductionRuleCode.QualifiedIdentifier),
										  new ProductionRuleSymbol(ProductionRuleCode.Parameters)),

					ProductionRule.Create(ProductionRuleCode.Parameters,
										  new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
										  new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),
					ProductionRule.Create(ProductionRuleCode.Parameters,
										  new ProductionRuleSymbol(AtomCode.OpeningRoundParenthesis),
										  new ProductionRuleSymbol(ProductionRuleCode.ActualParameters)),

					ProductionRule.Create(ProductionRuleCode.ActualParameters,
										  new ProductionRuleSymbol(ProductionRuleCode.Expression),
										  new ProductionRuleSymbol(ProductionRuleCode.OtherParameters)),
					ProductionRule.Create(ProductionRuleCode.OtherParameters,
										  new ProductionRuleSymbol(AtomCode.Comma),
										  new ProductionRuleSymbol(ProductionRuleCode.ActualParameters)),
					ProductionRule.Create(ProductionRuleCode.OtherParameters,
										  new ProductionRuleSymbol(AtomCode.ClosingRoundParenthesis)),

					ProductionRule.Create(ProductionRuleCode.Assembly,
										  new ProductionRuleSymbol[0]),
					ProductionRule.Create(ProductionRuleCode.Assembly,
										  new ProductionRuleSymbol(ProductionRuleCode.PredicateDeclaration),
										  new ProductionRuleSymbol(ProductionRuleCode.Assembly)),
					ProductionRule.Create(ProductionRuleCode.PredicateDeclaration,
										  new ProductionRuleSymbol(ProductionRuleCode.PredicateDefinition)),

					ProductionRule.Create(ProductionRuleCode.PredicateDefinition,
										  new ProductionRuleSymbol(AtomCode.Predicate),
										  new ProductionRuleSymbol(AtomCode.Identifier),
										  new ProductionRuleSymbol(ProductionRuleCode.Statements),
										  new ProductionRuleSymbol(AtomCode.End)),

					ProductionRule.Create(ProductionRuleCode.Statements,
										  new ProductionRuleSymbol[0]),
					ProductionRule.Create(ProductionRuleCode.Statements,
										  new ProductionRuleSymbol(ProductionRuleCode.Statement),
										  new ProductionRuleSymbol(ProductionRuleCode.Statements)),

					ProductionRule.Create(ProductionRuleCode.Statement,
										  new ProductionRuleSymbol(ProductionRuleCode.FunctionCall),
										  new ProductionRuleSymbol(AtomCode.Dot)),
					ProductionRule.Create(ProductionRuleCode.Statement,
										  new ProductionRuleSymbol(ProductionRuleCode.VariableDeclarationStatement)),

					ProductionRule.Create(ProductionRuleCode.VariableDeclarationStatement,
										  new ProductionRuleSymbol(ProductionRuleCode.VariableDeclaration),
										  new ProductionRuleSymbol(AtomCode.Equal),
										  new ProductionRuleSymbol(ProductionRuleCode.Expression),
										  new ProductionRuleSymbol(AtomCode.Dot)),

					ProductionRule.Create(ProductionRuleCode.VariableDeclaration,
										  new ProductionRuleSymbol(AtomCode.Identifier),
										  new ProductionRuleSymbol(AtomCode.Colon),
										  new ProductionRuleSymbol(ProductionRuleCode.Type)),

					ProductionRule.Create(ProductionRuleCode.Type,
										  new ProductionRuleSymbol(ProductionRuleCode.QualifiedIdentifier)),
					}
			};
		}
	}
}